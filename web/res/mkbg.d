import std.exception;
import std.file;
import std.random;

import ae.sys.file;
import ae.utils.graphics.color;
import ae.utils.graphics.im_convert;
import ae.utils.graphics.image;
import ae.utils.graphics.view;

enum w = 1024, h = 1024;

void main()
{
	auto stars =
		"stars.png" // Generated by hacking stars/width parameters in StarField::MakeStars
		.read
		.parseViaIMConvert!BGR();

	enforce(stars.w == w && stars.h == h);

	auto haze =
		"../../game/images/_menu/haze+.jpg"
		.read
		.parseViaIMConvert!BGR()
		.nearestNeighbor(800, 800)
		;

	auto tiled = stars.tile(w * 2, h * 2);

	Xorshift rng;
	rng.seed(3);

	foreach (n; 0..4)
	{
		auto hx = uniform(0, w, rng);
		auto hy = uniform(0, h, rng);

		auto hazeInstance = haze.copy;
		if ((n >> 0) & 1)
			hazeInstance = haze.vflip.copy;
		if ((n >> 1) & 1)
			hazeInstance = haze.hflip.copy;
		if ((n >> 1) & 1)
			hazeInstance = haze.flipXY.copy;

		foreach (x; 0..haze.w)
			foreach (y; 0..haze.h)
				tiled[hx + x, hy + y] += hazeInstance[x, y];
	}

	stars.colorMap!(c => RGB(c.r, c.g, c.b)).toPNG.toFile("bg.png");
}
